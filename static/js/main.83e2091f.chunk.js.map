{"version":3,"sources":["pages/GeoLocation/component.jsx","App.js","serviceWorker.js","routerReducer.js","models/App.js","store.js","index.js"],"names":["GeoLocation","useState","latlong","setLatLong","id","onClick","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","bluetooth","requestDevice","filters","services","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","console","log","readValue","catch","error","App","className","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","merge","payload","isLoading","reducers","effects","dispatch","history","createHistory","require","createBrowserHistory","store","init","models","redux","router","initialState","action","type","routerReducer","middlewares","routerMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83e2091f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst GeoLocation = () => {\r\n  const [latlong, setLatLong] = useState(\"\");\r\n  //   //function that gets the location and returns it\r\n  //   function getLocation() {\r\n  //     setInterval(() =>{\r\n  //     if (navigator.geolocation) {\r\n  //       navigator.geolocation.getCurrentPosition(showPosition);\r\n  //     } else {\r\n  //       console.log(\"Geo Location not supported by browser\");\r\n  //     }\r\n  //     }, 1000 * 5);\r\n  //   }\r\n\r\n  //   //function that retrieves the position\r\n  //   function showPosition(position) {\r\n  //     var location = {\r\n  //       longitude: position.coords.longitude,\r\n  //       latitude: position.coords.latitude,\r\n  //     };\r\n  //     setLatLong(\"Lat:\" + location.latitude + \" Long\" + location.longitude);\r\n  //     //Make API call to save location\r\n  //   }\r\n  //   //request for location\r\n\r\n  const searchBluetooth = () => {\r\n    navigator.bluetooth.requestDevice({\r\n        filters: [{ services: ['battery_service'] }]\r\n      })\r\n        .then(function(device) {\r\n          // Step 2: Connect to it\r\n          setLatLong(\"device\", device)\r\n          return device.gatt.connect();\r\n        })\r\n        .then(function(server) {\r\n          // Step 3: Get the Service\r\n          return server.getPrimaryService('battery_service');\r\n        })\r\n        .then(function(service) {\r\n          // Step 4: get the Characteristic\r\n          return service.getCharacteristic('battery_level');\r\n        })\r\n        .then(function(characteristic) {\r\n          // Step 5: Write to the characteristic\r\n          console.log(\"Value\", characteristic);\r\n          return characteristic.readValue();\r\n        })\r\n        .catch(function(error) {\r\n           // And of course: error handling!\r\n           console.error('Connection failed!', error);\r\n        });\r\n  }\r\n\r\n  const onClickLocation = () => {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition(function (location) {\r\n        setLatLong(\r\n         \r\n            \"Lat:\" +\r\n            location.coords.latitude +\r\n            \" Long\" +\r\n            location.coords.longitude\r\n        );\r\n      });\r\n    } else {\r\n      setLatLong(\"Geolocation API not supported.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>You are safe</div>\r\n      {/* {getLocation()} */}\r\n      {/* {latlong} */}\r\n      <button id=\"askButton\" onClick={() => onClickLocation()}>\r\n        Ask for location\r\n      </button>\r\n      <button id=\"askButton\" onClick={() => searchBluetooth()}>\r\n        Ask for Bluetooth\r\n      </button>\r\n      <br></br>\r\n      {latlong}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoLocation;\r\n","import React from 'react';\nimport './App.css';\nimport GeoLocation from './pages/GeoLocation/component'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GeoLocation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const merge = (state, payload) => ({\r\n    ...state,\r\n    ...payload,\r\n  });\r\n  \r\n  export default history => {\r\n    const initialState = {\r\n      location: history.location,\r\n      action: history.action,\r\n    };\r\n    return (state = initialState, { type, payload } = {}) => {\r\n      if (type === '@@router/LOCATION_CHANGE') {\r\n        return merge(state, payload);\r\n      }\r\n      return state;\r\n    };\r\n  };\r\n  ","// import apiRequest from '../services/apiServices';\r\n\r\n\r\nconst initialState = {\r\n isLoading : false\r\n};\r\n\r\nconst App = {\r\n  state: { ...initialState },\r\n  reducers: {\r\n  \r\n  },\r\n  effects: dispatch => ({\r\n    \r\n  })\r\n};\r\n\r\nexport default App;\r\n","import { init } from \"@rematch/core\";\r\nimport { routerMiddleware } from \"connected-react-router\";\r\nimport routerReducer from './routerReducer';\r\nimport * as models from './models'\r\n\r\nvar createHistory = require('history').createBrowserHistory;\r\nexport const history = createHistory();\r\n\r\n\r\nconst store = init({\r\n  models,\r\n  redux: {\r\n    reducers:{\r\n        router: routerReducer(history),\r\n    },\r\n    middlewares: [routerMiddleware(history)],\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store, { history } from \"./store\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}